#!/bin/bash

#**************************************************************#
#                        Weather.sh                            #
#                            by                                #
#                  Debanjum Singh Solanky                      #
#                     August 12, 2013                          #
#                                                              #
# Obtains Current/Forecasted Weather Report for Specified City #
#      ./Weather.sh Current/Forecast City [Country]            #
#**************************************************************#

# INITIALISING VARIABLES
scriptsdir='path/to/WeatherWall'	                         #SETTING SCRIPTS DIRECTORY
wallpaperdir='./.wallpaper'	                         #SETTING WALLPAPER DIRECTORY
reportsdir="$scriptsdir/Reports"                                 #SETTING WEATHER REPORTS DIRECTORY
iconsdir="$scriptsdir/Icons"                                     #SETTING ICONS DIRECTORY
hour=$(date +%H)                                                 #EVALUATING CURRENT TIME
location='Unknown'                                               #SETTING LOCATION
timeofday='Unknown'                                              #INITIALISING TIME OF DAY
notifyicon="$scriptsdir/Icons/weather.svg"                       #SETTING DEFAULT NOTIFICATION ICON LOCATION

#VALID ARGUMENTS
[ $# -eq 2 ] && (

# WEATHER WALLPAPER UPDATING NOTIFICATION
notify-send "Weather Wallpaper" "Updating $1 Weather in $2 " -i "$notifyicon" -t 5000 --hint string:transient:1

# BACKING UP OLD WEATHER REPORT
`mv "$reportsdir/$2" "$reportsdir/$2_old"`

# RETRIEVING CURRENT WEATHER REPORT
[[ $1 == 'Current' ]] && (wget -q -O "$reportsdir/$2" http://api.wunderground.com/api/YOUR_WUNDERGROUND_APIKEY/conditions/q/India/"$2".xml)

# RETRIEVING FORECASTED WEATHER REPORT
[ $1 == 'Forecast' ] && (wget -q -O "$reportsdir/$2" http://api.wunderground.com/api/YOUR_WUNDERGROUND_APIKEY/conditions/forecast/q/India/"$2".xml)

# ERROR CHECKING: INCASE UNABLE TO RETRIEVE LATEST WEATHER REPORT
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
[[ "$state" = "" ]] && ( echo "UNABLE TO RETRIEVE LATEST WEATHER REPORT" `mv "$reportsdir/$2_old" "$reportsdir/$2"` )

# EXTRACTING REQUIRED WEATHER CONDITION FROM XML CONT..
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
temp=`sed -n 's/^.*<\(temp_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
feelslike=`sed -n 's/^.*<\(feelslike_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
winddir=`sed -n 's/^.*<\(wind_dir\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
visibility=`sed -n 's/^.*<\(visibility_km\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
uvradiation=`sed -n 's/^.*<\(UV\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
pressure=`sed -n 's/^.*<\(pressure_mb\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
localtime=`sed -n 's/^.*<\(local_time_rfc822\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
localtime=`echo $localtime | awk '{print $5}'`
hour=`echo $localtime | awk -F ':' '{print $1}'`
chanceofrain=`sed -n 's/^.*<\(pop\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
chanceofrain=`echo $chanceofrain | awk '{print $1}'`

# PRESENTING & STORING WEATHER REPORT
echo -e "\tWEATHER REPORT\n\t   $1\n\t   $2\n\t   @ $hour 00" | tee "$reportsdir/$2_$1"
echo -e "Conditions: $state\nTemp: $temp C\tFeels Like: $feelslike C\nWinds Direction: $winddir\t Wind Speeds: $windspeed KPH" | tee -a "$reportsdir/$2_$1"
echo -e "Visibility: $visibility KM \t UV Radiation Levels: $uvradiation" | tee -a "$reportsdir/$2_$1"
[ $1 == 'Forecast' ] && ( echo -e "Chance of Rain: $chanceofrain %\tPressure: $pressure mBar" | tee -a "$reportsdir/$2_$1" ) ) || (

# VALID ARGUMENTS
[ $# -eq 3 ] && (

# WEATHER WALLPAPER UPDATING NOTIFICATION
notify-send "Weather Wallpaper" "Updating $1 Weather Report on $2, $3 " -i "$notifyicon" -t 5000 --hint string:transient:1

# BACKING UP OLD WEATHER REPORT
`mv "$reportsdir/$2,$3" "$reportsdir/$2,$3_old"`

# RETRIEVING CURRENT WEATHER REPORT
[[ $1 == 'Current' ]] && (wget -q -O "$reportsdir/$2,$3" http://api.wunderground.com/api/ENTER_WUNDERGROUND_API_KEY/conditions/q/"$3"/"$2".xml)

# RETRIEVING FORECASTED WEATHER REPORT
[ $1 == 'Forecast' ] && (wget -q -O "$reportsdir/$2,$3" http://api.wunderground.com/api/ENTER_WUNDERGROUND_API_KEY/conditions/forecast/q/"$3"/"$2".xml)

# ERROR CHECKING: INCASE UNABLE TO RETRIEVE LATEST WEATHER REPORT
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
[[ "$state" = "" ]] && ( echo "UNABLE TO RETRIEVE LATEST WEATHER REPORT" `mv "$reportsdir/$2,$3_old" "$reportsdir/$2,$3"`)

# EXTRACTING REQUIRED WEATHER CONDITION FROM XML CONT..
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
temp=`sed -n 's/^.*<\(temp_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
feelslike=`sed -n 's/^.*<\(feelslike_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
winddir=`sed -n 's/^.*<\(wind_dir\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
visibility=`sed -n 's/^.*<\(visibility_km\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
uvradiation=`sed -n 's/^.*<\(UV\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
pressure=`sed -n 's/^.*<\(pressure_mb\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
localtime=`sed -n 's/^.*<\(local_time_rfc822\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
localtime=`echo $localtime | awk '{print $5}'`
hour=`echo $localtime | awk -F ':' '{print $1}'`
chanceofrain=`sed -n 's/^.*<\(pop\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
chanceofrain=`echo $chanceofrain | awk '{print $1}'`

# SETTING NOTIFICATION ICON
[[ $hour -gt 5 && $hour -lt 18 ]] && (

# PRESENTING & STORING WEATHER REPORT
echo -e "\tWEATHER REPORT\n\t   $1\n\t   $2\n\t   @ $hour 00" | tee "$reportsdir/$2_$1"
echo -e "Conditions: $state\nTemp: $temp C\tFeels Like: $feelslike C\nWinds Direction: $winddir\t Wind Speeds: $windspeed KPH" | tee -a "$reportsdir/$2_$1"
echo -e "Visibility: $visibility KM \t UV Radiation Levels: $uvradiation" | tee -a "$reportsdir/$2_$1"
[ $1 == 'Forecast' ] && ( echo -e "Chance of Rain: $chanceofrain %\tPressure: $pressure mBar" | tee -a "$reportsdir/$2_$1" ) ) ) )

# INVALID ARGUMENTS
[[ $# -ne 3 && $# -ne 2 ]] && (
echo -e "Invalid Argument(s)\nCommand Format: $0 Current/Forecast City\nExample 1: $0 Current \"New Delhi\"\nOR\nCommand Format: $0 Current/Forecast Country City\nExample 2: $0 Current \"London\" \"UK\"" )

# CLEANING UP
[[ $(find . -iname notifyicon) != "" ]] && ( rm ./notifyicon )
