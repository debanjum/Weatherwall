#!/bin/bash

#************************************************************#
#                       Wallpaper.sh                         #
#                            by                              #
#                  Debanjum Singh Solanky                    #
#                     August 07, 2013                        #
#                                                            #
# Update Wallpaper based on Current Local Weather Conditions #
#           ./Wallpaper.sh Current/Forecast City             #
#                            OR                              #
#       ./Wallpaper.sh Current/Forecast Country City         #
#************************************************************#

# INITIALISING VARIABLES
scriptsdir='path/to/WeatherWall'			         #SETTING SCRIPTS DIRECTORY
wallpapersdir='./.wallpaper'		                 #SETTING WALLPAPER DIRECTORY
reportsdir="$scriptsdir/Reports"                                 #SETTING WEATHER REPORTS DIRECTORY
iconsdir="$scriptsdir/Icons"                                     #SETTING ICONS DIRECTORY
hour=$(date +%H)                                                 #EVALUATING CURRENT TIME
location='Unknown'                                               #SETTING LOCATION
timeofday='Unknown'                                              #INITIALISING TIME OF DAY
notifyicon="$iconsdir/weather.svg"                               #SETTING DEFAULT NOTIFICATION ICON LOCATION

# VALID ARGUMENTS
[ $# -eq 2 ] && (

# WEATHER WALLPAPER UPDATING NOTIFICATION
notify-send "Weather Wallpaper" "Updating $1 Weather in $2 " -i "$notifyicon" -t 5000 --hint string:transient:1

# BACKING UP OLD WEATHER REPORT
`mv "$reportsdir/$2" "$reportsdir/$2_old"`

# RETRIEVING CURRENT WEATHER REPORT
[[ $1 == 'Current' ]] && (wget -q -O "$reportsdir/$2" http://api.wunderground.com/api/YOUR_WUNDERGROUND_APIKEY/conditions/q/India/"$2".xml)

# RETRIEVING FORECASTED WEATHER REPORT
[ $1 == 'Forecast' ] && (wget -q -O "$reportsdir/$2" http://api.wunderground.com/api/YOUR_WUNDERGROUND_APIKEY/conditions/forecast/q/India/"$2".xml)

# ERROR CHECKING: INCASE UNABLE TO RETRIEVE LATEST WEATHER REPORT
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
[[ "$state" = "" ]] && ( echo "UNABLE TO RETRIEVE LATEST WEATHER REPORT" `mv "$reportsdir/$2_old" "$reportsdir/$2"`)

# EXTRACTING REQUIRED WEATHER CONDITION FROM XML CONT..
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
temp=`sed -n 's/^.*<\(temp_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
feelslike=`sed -n 's/^.*<\(feelslike_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
winddir=`sed -n 's/^.*<\(wind_dir\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
visibility=`sed -n 's/^.*<\(visibility_km\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
uvradiation=`sed -n 's/^.*<\(UV\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
pressure=`sed -n 's/^.*<\(pressure_mb\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
localtime=`sed -n 's/^.*<\(local_time_rfc822\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
localtime=`echo $localtime | awk '{print $5}'`
hour=`echo $localtime | awk -F ':' '{print $1}'`
chanceofrain=`sed -n 's/^.*<\(pop\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2"`
chanceofrain=`echo $chanceofrain | awk '{print $1}'`

# SETTING NOTIFICATION ICON
[[ $hour -gt 5 && $hour -lt 18 ]] && (
 # DAY
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && ( echo "$iconsdir/hazeday.svg" > notifyicon ) || (
 [[ "$state" =~ "Clear" ]] && ( echo "$iconsdir/clearday.svg" > notifyicon ) || (
 [[ "$state" =~ "Thunder" ]] && ( echo "$iconsdir/thunderday.svg" > notifyicon ) || (
 [[ "$state" =~ "Rain" ]] && ( echo "$iconsdir/rainday.svg" > notifyicon ) || (
 [[ "$state" =~ "Partly" || "$state" =~ "Scattered" ]] && ( echo "$iconsdir/partlycloudyday.svg" > notifyicon ) || (
 [[ "$state" =~ "Mostly" || "$state" =~ "Overcast" ]] && ( echo "$iconsdir/mostlycloudy.svg" > notifyicon ) || (
 [[ "$state" =~ "Drizzle" ]] && ( echo "$iconsdir/drizzleday.svg" > notifyicon ) ) ) ) ) ) ) ) || (

 # NIGHT
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && ( echo "$iconsdir/hazenight.svg" > notifyicon ) || (
 [[ "$state" =~ "Clear" ]] && ( echo "$iconsdir/clearnight.svg" > notifyicon ) || (
 [[ "$state" =~ "Thunder" ]] && ( echo "$iconsdir/thundernight.svg" > notifyicon ) || (
 [[ "$state" =~ "Rain" ]] && ( echo "$iconsdir/rainnight.svg" > notifyicon ) || (
 [[ "$state" =~ "Partly" || "$state" =~ "Scattered" ]] && ( echo "$iconsdir/partlycloudynight.svg" > notifyicon ) || (
 [[ "$state" =~ "Mostly" || "$state" =~ "Overcast" ]] && ( echo "$iconsdir/mostlycloudy.svg" > notifyicon ) || (
 [[ "$state" =~ "Drizzle" ]] && ( echo "$iconsdir/drizzlenight.svg" > notifyicon ) ) ) ) ) ) ) )

# PRESENTING & STORING WEATHER REPORT
echo -e "\tWEATHER REPORT\n\t   $1\n\t   $2\n\t   @ $hour 00" | tee "$reportsdir/$2_$1"
echo -e "Conditions: $state\nTemp: $temp C\tFeels Like: $feelslike C\nWinds Direction: $winddir\t Wind Speeds: $windspeed KPH" | tee -a "$reportsdir/$2_$1"
echo -e "Visibility: $visibility KM \t UV Radiation Levels: $uvradiation" | tee -a "$reportsdir/$2_$1"
[ $1 == 'Forecast' ] && ( echo -e "Chance of Rain: $chanceofrain %\tPressure: $pressure mBar" | tee -a "$reportsdir/$2_$1" )

# UPDATING WALLPAPER
 # Night | Next Date
[ $hour -lt 5 ] && (

  # Weather Notification
   timeofday='night'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state To$timeofday in $2 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nr\* -type f | shuf -n1)") ) ) ) ) || (


 # Sunrise
[ $hour -lt 8 ] && ( 

  # Weather Notification
   timeofday='Sunrise'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state at $timeofday in $2 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srcr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srcd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srr\* -type f | shuf -n1)") ) ) ) ) || (


 # Day
[ $hour -lt 17 ] && ( 

  # Weather Notification
   timeofday='day'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state To$timeofday in $2 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mcr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mcd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mr\* -type f | shuf -n1)") ) ) ) ) || (


 # Sunset
[ $hour -lt 20 ] && (

  # Weather Notification
   timeofday='Sunset'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state at $timeofday in $2 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ssf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name sscr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name sscd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ssr\* -type f | shuf -n1)") ) ) ) ) || (


 # Night
[ $hour -lt 24 ] && ( 

  # Weather Notification
   timeofday='night'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state To$timeofday in $2 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy/Partly Cloudy/Scattered Clouds
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nr\* -type f | shuf -n1)") ) ) ) ) ) ) ) ) ) || (

# VALID ARGUMENTS
[ $# -eq 3 ] && (

# WEATHER WALLPAPER UPDATING NOTIFICATION
notify-send "Weather Wallpaper" "Updating $1 Weather Report on $2, $3 " -i "$notifyicon" -t 5000 --hint string:transient:1

# BACKING UP OLD WEATHER REPORT
`mv "$reportsdir/$2,$3" "$reportsdir/$2,$3_old"`

# RETRIEVING CURRENT WEATHER REPORT
[[ $1 == 'Current' ]] && (wget -q -O "$reportsdir/$2,$3" http://api.wunderground.com/api/YOUR_WUNDERGROUND_APIKEY/conditions/q/"$3"/"$2".xml)

# RETRIEVING FORECASTED WEATHER REPORT
[ $1 == 'Forecast' ] && (wget -q -O "$reportsdir/$2,$3" http://api.wunderground.com/api/YOUR_WUNDERGROUND_APIKEY/conditions/forecast/q/"$3"/"$2".xml)

# ERROR CHECKING: INCASE UNABLE TO RETRIEVE LATEST WEATHER REPORT
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
[[ "$state" = "" ]] && ( echo "UNABLE TO RETRIEVE LATEST WEATHER REPORT" `mv "$reportsdir/$2,$3_old" "$reportsdir/$2,$3"`)

# EXTRACTING REQUIRED WEATHER CONDITION FROM XML CONT..
state=`sed -n 's/^.*<\(weather\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
temp=`sed -n 's/^.*<\(temp_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
feelslike=`sed -n 's/^.*<\(feelslike_c\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
winddir=`sed -n 's/^.*<\(wind_dir\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
visibility=`sed -n 's/^.*<\(visibility_km\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
uvradiation=`sed -n 's/^.*<\(UV\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
pressure=`sed -n 's/^.*<\(pressure_mb\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
windspeed=`sed -n 's/^.*<\(wind_kph\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
localtime=`sed -n 's/^.*<\(local_time_rfc822\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
localtime=`echo $localtime | awk '{print $5}'`
hour=`echo $localtime | awk -F ':' '{print $1}'`
chanceofrain=`sed -n 's/^.*<\(pop\)>\([^<]*\)<\/.*$/\2/p' "$reportsdir/$2,$3"`
chanceofrain=`echo $chanceofrain | awk '{print $1}'`

# SETTING NOTIFICATION ICON
[[ $hour -gt 5 && $hour -lt 18 ]] && (
 # DAY
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && ( echo "$iconsdir/hazeday.svg" > notifyicon ) || (
 [[ "$state" =~ "Clear" ]] && ( echo "$iconsdir/clearday.svg" > notifyicon ) || (
 [[ "$state" =~ "Thunder" ]] && ( echo "$iconsdir/thunderday.svg" > notifyicon ) || (
 [[ "$state" =~ "Rain" ]] && ( echo "$iconsdir/rainday.svg" > notifyicon ) || (
 [[ "$state" =~ "Partly" || "$state" =~ "Scattered" ]] && ( echo "$iconsdir/partlycloudyday.svg" > notifyicon ) || (
 [[ "$state" =~ "Mostly" || "$state" =~ "Overcast" ]] && ( echo "$iconsdir/mostlycloudy.svg" > notifyicon ) || (
 [[ "$state" =~ "Drizzle" ]] && ( echo "$iconsdir/drizzleday.svg" > notifyicon ) ) ) ) ) ) ) ) || (

 # NIGHT
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && ( echo "$iconsdir/hazenight.svg" > notifyicon ) || (
 [[ "$state" =~ "Clear" ]] && ( echo "$iconsdir/clearnight.svg" > notifyicon ) || (
 [[ "$state" =~ "Thunder" ]] && ( echo "$iconsdir/thundernight.svg" > notifyicon ) || (
 [[ "$state" =~ "Rain" ]] && ( echo "$iconsdir/rainnight.svg" > notifyicon ) || (
 [[ "$state" =~ "Partly" || "$state" =~ "Scattered" ]] && ( echo "$iconsdir/partlycloudynight.svg" > notifyicon ) || (
 [[ "$state" =~ "Mostly" || "$state" =~ "Overcast" ]] && ( echo "$iconsdir/mostlycloudy.svg" > notifyicon ) || (
 [[ "$state" =~ "Drizzle" ]] && ( echo "$iconsdir/drizzlenight.svg" > notifyicon ) ) ) ) ) ) ) )

# PRESENTING & STORING WEATHER REPORT
echo -e "\tWEATHER REPORT\n\t   $1\n\t   $2\n\t   @ $hour 00" | tee "$reportsdir/$2_$1"
echo -e "Conditions: $state\nTemp: $temp C\tFeels Like: $feelslike C\nWinds Direction: $winddir\t Wind Speeds: $windspeed KPH" | tee -a "$reportsdir/$2_$1"
echo -e "Visibility: $visibility KM \t UV Radiation Levels: $uvradiation" | tee -a "$reportsdir/$2_$1"
[ $1 == 'Forecast' ] && ( echo -e "Chance of Rain: $chanceofrain %\tPressure: $pressure mBar" | tee -a "$reportsdir/$2_$1" )

# UPDATING WALLPAPER
 # Night | Next Date
[ $hour -lt 5 ] && (

  # Weather Notification
   timeofday='night'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state To$timeofday in $2, $3 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nr\* -type f | shuf -n1)") ) ) ) ) || (


 # Sunrise
[ $hour -lt 8 ] && ( 

  # Weather Notification
   timeofday='Sunrise'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state at $timeofday in $2, $3 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srcr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srcd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name srr\* -type f | shuf -n1)") ) ) ) ) || (


 # Day
[ $hour -lt 17 ] && ( 

  # Weather Notification
   timeofday='day'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state To$timeofday in $2, $3 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mcr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mcd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name mr\* -type f | shuf -n1)") ) ) ) ) || (


 # Sunset
[ $hour -lt 20 ] && (

  # Weather Notification
   timeofday='Sunset'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state at $timeofday in $2, $3 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ssf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name sscr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name sscd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ssr\* -type f | shuf -n1)") ) ) ) ) || (


 # Night
[ $hour -lt 24 ] && ( 

  # Weather Notification
   timeofday='night'
   notifyicon=$(<./notifyicon)
   notify-send "$1 Weather" "$state To$timeofday in $2, $3 " -i "$notifyicon" -t 5000 --hint string:transient:1

  # Haze/Fog
 [[ "$state" =~ "Haze" || "$state" =~ "Fog" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nf\* -type f | shuf -n1)") || (

  # Clear
 [[ "$state" =~ "Clear" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncr\* -type f | shuf -n1)") || (

  # Cloudy/Mostly Cloudy/Partly Cloudy/Scattered Clouds
 [[ "$state" =~ "Cloud" || "$state" =~ "Overcast" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name ncd\* -type f | shuf -n1)") || (

  # Rain/Thunderstorm/Drizzle
 [[ "$state" =~ "Rain" || "$state" =~ "Thunder" || "$state" =~ "thunder" || "$state" =~ "Drizzle" ]] && (
  gsettings set org.gnome.desktop.background picture-uri file://"$(find ./.wallpaper/ -name nr\* -type f | shuf -n1)") ) ) ) ) ) ) ) ) ) )

# INVALID ARGUMENTS
[[ $# -ne 3 && $# -ne 2 ]] && (
echo -e "Invalid Argument(s)\nCommand Format: $0 Current/Forecast City\nExample 1: $0 Current \"New Delhi\"\nOR\nCommand Format: $0 Current/Forecast Country City\nExample 2: $0 Current \"London\" \"UK\"")

# CLEANING UP
rm $PWD/notifyicon
